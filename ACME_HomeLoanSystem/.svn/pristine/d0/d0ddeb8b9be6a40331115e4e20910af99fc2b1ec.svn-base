package beans;

import exceptions.ApplicationLogicException;
import exceptions.LoginFailureException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import javax.ejb.PostActivate;
import javax.ejb.PrePassivate;
import javax.ejb.Stateless;
import javax.jms.JMSException;
import javax.naming.NamingException;
import jms.SavingsProducerBridge;
import jms.SavingsProducerJMS;

/**
 *
 * @author Peter (s3286430(
 */
@Stateless
public class HomeLoanClient implements HomeLoanClientRemote
{

	private boolean mLoggedIn;
	private int mCustomerId;
	private SavingsProducerBridge mSavingsSystem;

	@PostConstruct
	public void postConstruct()
	{
		mLoggedIn = false;
		mCustomerId = 0;
		mSavingsSystem = null;
		postActivate();
	}

	@PostActivate
	public void postActivate()
	{
		if (mSavingsSystem == null)
		{
			try
			{
				mSavingsSystem = new SavingsProducerJMS();
			}
			catch (JMSException ex)
			{
				System.out.println("herpderpderp");
				Logger.getLogger(CustomerClientBean.class.getName()).
						log(Level.SEVERE, null, ex);
			}
			catch (NamingException ex)
			{
				Logger.getLogger(HomeLoanClient.class.getName()).
						log(Level.SEVERE, null, ex);
			}
		}
	}

	@PrePassivate
	@PreDestroy
	public void close()
	{
		// We should somehow close the JMS connection in SavingsProducer?
	}

	@Override
	public boolean getIsLoggedIn()
	{
		return mLoggedIn;
	}

	@Override
	public String getCustomerFullName() throws ApplicationLogicException,
			LoginFailureException
	{
		// Experimental
		// return "HomeLoanClient.getCustomerFullName success 2!";
		mSavingsSystem.getCustomerFullName(2);
		
		return "test";
		
		// return "testing: " + mSavingsSystem.getCustomerFullName(2);
	}

	@Override
	public int createHomeLoanAccount(int aSavingsId, int aAmountBorrowed)
			throws ApplicationLogicException, LoginFailureException
	{
		return 0;
	}

	@Override
	public void repayHomeLoanAccount(int aHomeLoanId, int aSavingsId,
			int aAmount)
			throws ApplicationLogicException, LoginFailureException
	{
		// Must use JMS
		// Must have transaction support
		// Must be atomic
	}

	@Override
	public List<String> getSavingsAccounts()
			throws ApplicationLogicException, LoginFailureException
	{
		// Must use JMS
		return null;
	}

	@Override
	public List<String> getHomeLoanAccounts()
			throws ApplicationLogicException, LoginFailureException
	{
		// Must use JMS? Not sure
		return null;
	}
}
