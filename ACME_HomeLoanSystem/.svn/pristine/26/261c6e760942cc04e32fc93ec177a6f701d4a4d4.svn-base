package data.access.jpa;

import data.access.HomeLoanDAO;
import data.access.exception.NonexistentEntityException;
import data.access.exception.RollbackFailureException;
import data.jpa.HomeLoan;
import exceptions.ApplicationLogicException;
import java.io.Serializable;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Query;
import javax.persistence.EntityNotFoundException;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;
import javax.transaction.UserTransaction;

/**
 *
 * @author Peter (s3286430)
 */
public class JPAHomeLoanDAO implements Serializable, HomeLoanDAO
{

	public JPAHomeLoanDAO(UserTransaction aUserTransaction,
			EntityManagerFactory aEntManagerFactory)
	{
		mUserTransaction = aUserTransaction;
		mEntManagerFactory = aEntManagerFactory;
	}
	private UserTransaction mUserTransaction = null;
	private EntityManagerFactory mEntManagerFactory = null;

	public EntityManager getEntityManager()
	{
		return mEntManagerFactory.createEntityManager();
	}

	@Override
	public void create(HomeLoan aHomeLoan) throws RollbackFailureException, Exception
	{
		EntityManager lEntManager = null;
		try
		{
			mUserTransaction.begin();
			lEntManager = getEntityManager();
			lEntManager.persist(aHomeLoan);
			mUserTransaction.commit();
		}
		catch (Exception ex)
		{
			try
			{
				mUserTransaction.rollback();
			}
			catch (Exception re)
			{
				throw new RollbackFailureException("An error occurred attempting to roll back the transaction.", re);
			}
			throw ex;
		}
		finally
		{
			if (lEntManager != null)
			{
				lEntManager.close();
			}
		}
	}

	@Override
	public void edit(HomeLoan homeLoan) throws NonexistentEntityException, RollbackFailureException, Exception
	{
		EntityManager em = null;
		try
		{
			mUserTransaction.begin();
			em = getEntityManager();
			homeLoan = em.merge(homeLoan);
			mUserTransaction.commit();
		}
		catch (Exception ex)
		{
			try
			{
				mUserTransaction.rollback();
			}
			catch (Exception re)
			{
				throw new RollbackFailureException(
						"An error occurred attempting to roll back the transaction.",
						re);
			}
			String msg = ex.getLocalizedMessage();
			if (msg == null || msg.length() == 0)
			{
				Long id = homeLoan.getId();
				if (findHomeLoan(id) == null)
				{
					throw new NonexistentEntityException(
							"The homeLoan with id " + id + " no longer exists.");
				}
			}
			throw ex;
		}
		finally
		{
			if (em != null)
			{
				em.close();
			}
		}
	}

	@Override
	public void destroy(Long id) throws NonexistentEntityException, RollbackFailureException, Exception
	{
		EntityManager em = null;
		try
		{
			mUserTransaction.begin();
			em = getEntityManager();
			HomeLoan homeLoan;
			try
			{
				homeLoan = em.getReference(HomeLoan.class, id);
				homeLoan.getId();
			}
			catch (EntityNotFoundException enfe)
			{
				throw new NonexistentEntityException(
						"The homeLoan with id " + id + " no longer exists.",
						enfe);
			}
			em.remove(homeLoan);
			mUserTransaction.commit();
		}
		catch (Exception ex)
		{
			try
			{
				mUserTransaction.rollback();
			}
			catch (Exception re)
			{
				throw new RollbackFailureException(
						"An error occurred attempting to roll back the transaction.",
						re);
			}
			throw ex;
		}
		finally
		{
			if (em != null)
			{
				em.close();
			}
		}
	}

	@Override
	public List<HomeLoan> findHomeLoanEntities()
	{
		return findHomeLoanEntities(true, -1, -1);
	}

	@Override
	public List<HomeLoan> findHomeLoanEntities(int maxResults, int firstResult)
	{
		return findHomeLoanEntities(false, maxResults, firstResult);
	}

	private List<HomeLoan> findHomeLoanEntities(boolean all, int maxResults,
			int firstResult)
	{
		EntityManager em = getEntityManager();
		try
		{
			CriteriaQuery cq = em.getCriteriaBuilder().createQuery();
			cq.select(cq.from(HomeLoan.class));
			Query q = em.createQuery(cq);
			if (!all)
			{
				q.setMaxResults(maxResults);
				q.setFirstResult(firstResult);
			}
			return q.getResultList();
		}
		finally
		{
			em.close();
		}
	}

	@Override
	public HomeLoan findHomeLoan(Long id)
	{
		EntityManager em = getEntityManager();
		try
		{
			return em.find(HomeLoan.class, id);
		}
		finally
		{
			em.close();
		}
	}

	@Override
	public int getHomeLoanCount()
	{
		EntityManager em = getEntityManager();
		try
		{
			CriteriaQuery cq = em.getCriteriaBuilder().createQuery();
			Root<HomeLoan> rt = cq.from(HomeLoan.class);
			cq.select(em.getCriteriaBuilder().count(rt));
			Query q = em.createQuery(cq);
			return ((Long) q.getSingleResult()).intValue();
		}
		finally
		{
			em.close();
		}
	}
}
