package beans;

import jpa.entity.HomeLoan;
import exceptions.ApplicationLogicException;
import java.math.BigDecimal;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import javax.annotation.Resource;
import javax.ejb.PostActivate;
import javax.ejb.PrePassivate;
import javax.ejb.Stateless;
import javax.ejb.TransactionManagement;
import javax.ejb.TransactionManagementType;
import javax.jms.JMSException;
import javax.naming.NamingException;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;
import jms.SavingsProducerBridge;
import jms.SavingsProducerJMS;
import entitydata.Customer;
import entitydata.Savings;
import java.util.ArrayList;
import javax.persistence.Query;
import javax.persistence.criteria.CriteriaQuery;

/**
 *
 * @author Peter (s3286430)
 */
@Stateless
@TransactionManagement(TransactionManagementType.BEAN)
public class HomeLoanBean implements HomeLoanBeanRemote
{

	private boolean mLoggedIn;
	private int mCustomerId;
	private SavingsProducerBridge mSavingsSystem;
	@Resource
	private UserTransaction mTransaction;
	@PersistenceContext(unitName = "ACME_HomeLoanSystem-ejbPU")
	private EntityManager mEntManager;

	@PostConstruct
	public void postConstruct()
	{
		mLoggedIn = false;
		mCustomerId = 0;
		mSavingsSystem = null;
		postActivate();
	}

	@PostActivate
	public void postActivate()
	{
		if (mSavingsSystem == null)
		{
			try
			{
				mSavingsSystem = new SavingsProducerJMS();
			}
			catch (JMSException ex)
			{
				Logger.getLogger(HomeLoanBean.class.getName()).
						log(Level.SEVERE, null, ex);
			}
			catch (NamingException ex)
			{
				Logger.getLogger(HomeLoanBean.class.getName()).
						log(Level.SEVERE, null, ex);
			}
		}
	}

	@PrePassivate
	@PreDestroy
	public void close()
	{
		// We should somehow close the JMS connection in SavingsProducer?
	}

	@Override
	public int createHomeLoanAccount(BigDecimal aAmountBorrowed,
			String aCurrentJob, String aSalaryYear, String aContact,
			int aContactType)
			throws ApplicationLogicException
	{
		// Check requirements for HomeLoan first

		// Amount borrowed must be > 0

		// Must have a Savings account must exist and must have at least 3 
		// deposits made into it

		try
		{
			mTransaction.begin();

			HomeLoan lHomeLoan = new HomeLoan();
			lHomeLoan.setAmountBorrowed(aAmountBorrowed);

			mEntManager.persist(lHomeLoan);

			mTransaction.commit();
			return 42;
		}
		catch (Exception aException)
		{
			Logger.getLogger(HomeLoanBean.class.getName()).
					log(Level.SEVERE, null, aException);
			try
			{
				mTransaction.rollback();
			}
			catch (Exception aException2)
			{
				Logger.getLogger(HomeLoanBean.class.getName()).
						log(Level.SEVERE, null, aException2);
			}
		}

		return 0;
	}

	@Override
	public Customer getCustomerDetails(int aIDCustomer) throws ApplicationLogicException
	{
		return mSavingsSystem.getCustomerDetails(aIDCustomer);
	}

	@Override
	public Savings getSavingsDetails(int aIDSavings) throws ApplicationLogicException
	{
		return mSavingsSystem.getSavingsDetails(aIDSavings);
	}

	@Override
	public entitydata.HomeLoan getHomeLoanDetails(int aIDHomeLoan) throws ApplicationLogicException
	{
		// Must use JMS
		// Must have transaction support
		// Must be atomic
		throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
	}

	@Override
	public List<Integer> getSavingsIdList(int aIDCustomer) throws ApplicationLogicException
	{
		return mSavingsSystem.getSavingsIdList(aIDCustomer);
	}

	@Override
	public List<Long> getHomeLoanIdList(int aIDCustomer) throws ApplicationLogicException
	{
		CriteriaQuery lCritQuery = mEntManager.getCriteriaBuilder().
				createQuery();
		lCritQuery.select(lCritQuery.from(HomeLoan.class));
		Query lQuery = mEntManager.createQuery(lCritQuery);

		List<HomeLoan> lEntList = lQuery.getResultList();
		List<Long> lIdList = new ArrayList<Long>();
		for (HomeLoan lEnt : lEntList)
		{
			lIdList.add(lEnt.getId());
		}

		return lQuery.getResultList();
	}

	@Override
	public void repayHomeLoanAccount(int aHomeLoanId, int aIDSavings,
			BigDecimal aAmount) throws ApplicationLogicException
	{
		throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
	}

	@Override
	public boolean authenticateLogin(int aIDCustomer, String aPassword)
	{
		throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
	}
	
	@Override
	public void depositSavingAccount(int aIDSavings, BigDecimal aAmount)
			throws ApplicationLogicException
	{
	}
	
	@Override
	public void withdrawSavingAccount(int aIDSavings, BigDecimal aAmount)
			throws ApplicationLogicException
	{
	}
}
