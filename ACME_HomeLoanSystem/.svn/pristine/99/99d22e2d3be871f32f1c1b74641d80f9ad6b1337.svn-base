/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package jms;

import exceptions.ApplicationLogicException;
import java.math.BigDecimal;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.Resource;
import javax.jms.Connection;
import javax.jms.JMSConnectionFactory;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageProducer;
import javax.jms.Queue;
import javax.jms.QueueConnectionFactory;
import javax.jms.Session;
import javax.jms.TextMessage;

/**
 *
 * @author Peter (s3286430)
 */
public class SavingsProducerJMS implements SavingsProducerBridge
{
	// Define destination and our connection factory

	@Resource(mappedName = "jms/ACMESavingsQueue")
	private Queue mACMESavingsQueue;
	@JMSConnectionFactory("jms/ACMEHomeLoanQueueConnectionFactory")
	private QueueConnectionFactory mConnectionFactory;
	private Connection mConnection;
	private Session mSession;
	private MessageProducer mProducer;
	private Queue mReplyQueue;
	private long mCorrelationIdCounter;
	private static final long REPLY_TIMEOUT_MS = 10000;

	public SavingsProducerJMS() throws JMSException
	{
		mConnection = mConnectionFactory.createConnection();
		// TODO: Experiment with making lSession support transactions (change to true)
		mSession = mConnection.createSession(false,
				Session.AUTO_ACKNOWLEDGE);
		mProducer = mSession.createProducer(mACMESavingsQueue);

		mReplyQueue = mSession.createTemporaryQueue();

		mCorrelationIdCounter = 0;
	}

	@Override
	public int withdrawFromSavingsAccount(int aIDSavingsAccount,
			BigDecimal aAmount) throws ApplicationLogicException
	{
		throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
	}

	@Override
	public BigDecimal getSavingsAccountBalance(int aIDSavingsAccount) throws ApplicationLogicException
	{
		throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
	}

	@Override
	public boolean verifyCustomerLogin(int aIDCustomer, String aPassword) throws ApplicationLogicException
	{
		throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
	}

	@Override
	public String getCustomerFullName(int aIDCustomer) throws ApplicationLogicException
	{
		try
		{
			Message lMessage = mSession.createMapMessage();
			lMessage.setStringProperty("methodType", "getCustomerFullName");
			lMessage.setIntProperty("IDCustomer", aIDCustomer);

			Message lResponse = sendJMSRequest(lMessage);

			if (lResponse == null)
			{
				throw new ApplicationLogicException();
			}
			else
			{
				TextMessage lTest = (TextMessage)lMessage;
				return lTest.getText();
				// return lResponse.getStringProperty("returnValue");
			}
		}
		catch (JMSException aException)
		{
			Logger.getLogger(SavingsProducerJMS.class.getName()).
					log(Level.SEVERE, null, aException);
			throw new ApplicationLogicException();
		}
	}

	@Override
	public List<SavingsInfo> getSavingsAccountList() throws ApplicationLogicException
	{
		throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
	}

	@Override
	public SavingsInfo getSavingsAccountInfo(int aIDSavings) throws ApplicationLogicException
	{
		throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
	}

	private Message sendJMSRequest(Message aMessage) throws JMSException
	{
		long lCorrelationIdCounter = mCorrelationIdCounter;
		mCorrelationIdCounter++;
		String lCorrelationId = Long.toHexString(lCorrelationIdCounter);

		// Create a destination for the reply
		aMessage.setJMSReplyTo(mReplyQueue);
		aMessage.setJMSCorrelationID(lCorrelationId);

		mProducer.send(aMessage);

		// A synchronous solution, since asynchronous is more complex
		// and doesn't provide us much of a benefit:
		// - We wait for a message to be received (with REPLY_TIMEOUT_MS timeout)
		// - Using MessageListener we only consume messages that have the correct ID

		MessageConsumer lConsumer = mSession.createConsumer(mReplyQueue,
				" JMSCorrelationID = '" + lCorrelationId + "'");
		Message lResponse = lConsumer.receive(REPLY_TIMEOUT_MS);
		lConsumer.close();
		
		return lResponse;
	}
}
